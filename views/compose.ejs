<%- include("partials/header"); -%>
    <link rel="stylesheet" href="/css/compose.css">
    <h1 style="align-items: center; text-align: center;">Compose Project</h1>
    <form class="container" action="/compose" method="post" enctype="multipart/form-data" style="margin-bottom: 50px;">
        <div class="form-group">
            <h2 style="align-items: center; text-align: center;">General Details</h2>
            <label class="label">Title</label>
            <input class="form-control" type="text" name="title" placeholder="Title" required />

            <label class="label">Sector</label>
            <input class="form-control" type="text" name="author" placeholder="Sector" required />

            <label class="label">About the Project</label>
            <textarea class="form-control" name="content" rows="5" cols="30"
                placeholder="Describe your project here...." required></textarea>
            <br>
            <br>


            <h2 style="align-items: center; text-align: center;">Specifications</h2>
            <div id="specifications-container">
                <!-- Initial specification input -->
                <div class="specification-input">
                    <label class="label">Specification 1</label>
                    <input class="form-control" type="text" name="specifications[]" placeholder="Specification 1" />
                    <button type="button" class="remove-specification btn btn-danger"
                        style="margin: 5px;">Remove</button>
                </div>
            </div>
            <button type="button" id="add-specification" class="btn btn-success" style="margin: 5px;">Add
                Specification</button>


            <!-- Add more specification fields as needed -->



            <br>
            <br>
            <br>



            <label class="label">Luxury Specifications</label>
            <input class="form-control" type="text" name="Lspec" placeholder="Luxery Specifications" />

            <br><br><br><br>




            <h2 style="align-items: center; text-align: center;">Features</h2>
            <div id="feature-container">
                <!-- Initial specification input -->
                <div class="feature-input">
                    <label class="label">Feature 1</label>
                    <input class="form-control" type="text" name="features[]" placeholder="Feature 1" />
                    <button type="button" class="remove-feature btn btn-danger" style="margin: 5px;">Remove</button>
                </div>
            </div>
            <button type="button" id="add-feature" class="btn btn-success" style="margin: 5px;">Add Features</button>

            <!-- Add more feature fields as needed -->

            <br>
            <br>
            <br>

            <h2 style="align-items: center; text-align: center;">Youtube Video link</h2>
            <!-- YouTube Link -->
            <label class="label">YouTube video key</label>
            <input class="form-control" type="text" name="youtube" placeholder="YouTube Link" />


            <br>
            <br>
            <br>

            <h2 style="align-items: center; text-align: center;">Map Data </h2>
            <!-- Map Coordinates -->

            <label class="label">Latitude</label>
            <input class="form-control" type="text" name="mapV" placeholder="Latitude" />


            <label class="label">Longitude</label>
            <input class="form-control" type="text" name="mapH" placeholder="Longitude" />




            <br>
            <br>
            <br>
            <h2 style="align-items: center; text-align: center;">Type of Project</h2>
            <!-- Type -->
            <label class="label">Type</label>
            <select class="form-control" name="type" required>
                <option value="">Select Type</option>
                <option value="Residential">Residential</option>
                <option value="Commercial">Commercial</option>
            </select>


            <br>
            <br>
            <br>
            <h2 style="align-items: center; text-align: center;">Images of project</h2>
            <!-- Images (Multiple File Upload) -->
            <label class="label">Images</label>
            <input type="file" name="image" accept="image/*" multiple />

            <br>
            <br>
            <label class="label" for="metatitle">Meta title</label>
            <br>
            <input class="form-control" type="text" name="metatitle" placeholder="Type Meta Title">
            <br>
            <br>
            <label class="label" for="metades">Meta description</label>
            <br>
            <input class="form-control" type="text" name="metades" placeholder="Type Meta description">
            <br>

        </div>
        <button class="btn btn-primary" type="submit" name="button">Publish</button>
    </form>



    <script>

        document.addEventListener("DOMContentLoaded", function () {
            const specificationsContainer = document.getElementById("specifications-container");
            const addSpecificationButton = document.getElementById("add-specification");

            // Function to add a new specification input field
            function addSpecificationInput() {
                const newSpecificationInput = document.createElement("div");
                newSpecificationInput.className = "specification-input";
                newSpecificationInput.innerHTML = `
            <label class="label">Specification ${specificationsContainer.children.length + 1}</label>
            <input class="form-control" type="text" name="specifications[]" placeholder="Specification ${specificationsContainer.children.length + 1}" />
            <button type="button" class="remove-specification btn btn-danger"
                        style="margin: 5px;">Remove</button>
            `;
                specificationsContainer.appendChild(newSpecificationInput);
            }

            // Function to remove a specification input field
            function removeSpecificationInput(event) {
                const specificationInput = event.target.closest(".specification-input");
                if (specificationInput) {
                    specificationsContainer.removeChild(specificationInput);
                    // Update the labels and placeholders of remaining input fields
                    const specificationInputs = specificationsContainer.querySelectorAll(".specification-input");
                    specificationInputs.forEach((input, index) => {
                        const label = input.querySelector("label");
                        const inputField = input.querySelector("input");
                        label.textContent = `Specification ${index + 1}`;
                        inputField.placeholder = `Specification ${index + 1}`;
                    });
                }
            }

            // Event listeners
            addSpecificationButton.addEventListener("click", addSpecificationInput);
            specificationsContainer.addEventListener("click", (event) => {
                if (event.target.classList.contains("remove-specification")) {
                    removeSpecificationInput(event);
                }
            });
        });
    </script>

    <script>
        // Function to add a new feature input
        function addFeature() {
            const featureContainer = document.getElementById("feature-container");
            const featureInput = document.createElement("div");
            featureInput.classList.add("feature-input");

            const featureNumber = featureContainer.getElementsByClassName("feature-input").length + 1;

            featureInput.innerHTML = `
                <label class="label">Feature ${featureNumber}</label>
                <input class="form-control" type="text" name="features[]" placeholder="Feature ${featureNumber}" />
                <button type="button" class="remove-feature btn btn-danger"
                        style="margin: 5px;">Remove</button>
            `;

            featureContainer.appendChild(featureInput);
        }

        // Function to remove a feature input
        function removeFeatureInput(event) {
            const featureInput = event.target.closest(".feature-input");
            if (featureInput) {
                featureInput.remove();

                // Update the labels and placeholders of remaining feature input fields
                const featureInputs = document.querySelectorAll(".feature-input");
                featureInputs.forEach((input, index) => {
                    const label = input.querySelector("label");
                    const inputField = input.querySelector("input");
                    label.textContent = `Feature ${index + 1}`;
                    inputField.placeholder = `Feature ${index + 1}`;
                });
            }
        }

        // Add event listener to the "Add Feature" button
        document.getElementById("add-feature").addEventListener("click", addFeature);

        // Add event listener to dynamically added "Remove Feature" buttons
        document.addEventListener("click", function (event) {
            if (event.target && event.target.classList.contains("remove-feature")) {
                removeFeatureInput(event);
            }
        });
    </script>